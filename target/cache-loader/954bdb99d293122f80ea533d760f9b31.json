{"remainingRequest":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js??ref--9-3!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","dependencies":[{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","mtime":1554281232175},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar ng_jhipster_1 = require(\"ng-jhipster\");\r\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar AccountService = /** @class */ (function () {\r\n    function AccountService(languageService, sessionStorage, http) {\r\n        this.languageService = languageService;\r\n        this.sessionStorage = sessionStorage;\r\n        this.http = http;\r\n        this.authenticated = false;\r\n        this.authenticationState = new rxjs_1.Subject();\r\n    }\r\n    AccountService.prototype.fetch = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/account', { observe: 'response' });\r\n    };\r\n    AccountService.prototype.save = function (account) {\r\n        return this.http.post(app_constants_1.SERVER_API_URL + 'api/account', account, { observe: 'response' });\r\n    };\r\n    AccountService.prototype.authenticate = function (identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    };\r\n    AccountService.prototype.hasAnyAuthority = function (authorities) {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    AccountService.prototype.hasAuthority = function (authority) {\r\n        if (!this.authenticated) {\r\n            return Promise.resolve(false);\r\n        }\r\n        return this.identity().then(function (id) {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, function () {\r\n            return Promise.resolve(false);\r\n        });\r\n    };\r\n    AccountService.prototype.identity = function (force) {\r\n        var _this = this;\r\n        if (force) {\r\n            this.userIdentity = undefined;\r\n        }\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.fetch()\r\n            .toPromise()\r\n            .then(function (response) {\r\n            var account = response.body;\r\n            if (account) {\r\n                _this.userIdentity = account;\r\n                _this.authenticated = true;\r\n                // After retrieve the account info, the language will be changed to\r\n                // the user's preferred language configured in the account setting\r\n                var langKey = _this.sessionStorage.retrieve('locale') || _this.userIdentity.langKey;\r\n                _this.languageService.changeLanguage(langKey);\r\n            }\r\n            else {\r\n                _this.userIdentity = null;\r\n                _this.authenticated = false;\r\n            }\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return _this.userIdentity;\r\n        })\r\n            .catch(function (err) {\r\n            _this.userIdentity = null;\r\n            _this.authenticated = false;\r\n            _this.authenticationState.next(_this.userIdentity);\r\n            return null;\r\n        });\r\n    };\r\n    AccountService.prototype.isAuthenticated = function () {\r\n        return this.authenticated;\r\n    };\r\n    AccountService.prototype.isIdentityResolved = function () {\r\n        return this.userIdentity !== undefined;\r\n    };\r\n    AccountService.prototype.getAuthenticationState = function () {\r\n        return this.authenticationState.asObservable();\r\n    };\r\n    AccountService.prototype.getImageUrl = function () {\r\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\r\n    };\r\n    var _a, _b, _c;\r\n    AccountService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_jhipster_1.JhiLanguageService !== \"undefined\" && ng_jhipster_1.JhiLanguageService) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _b : Object, typeof (_c = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _c : Object])\r\n    ], AccountService);\r\n    return AccountService;\r\n}());\r\nexports.AccountService = AccountService;\r\n",{"version":3,"file":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\account.service.ts","sourceRoot":"","sources":["E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\account.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { JhiLanguageService } from 'ng-jhipster';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { Account } from 'app/core/user/account.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AccountService {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    constructor(private languageService: JhiLanguageService, private sessionStorage: SessionStorageService, private http: HttpClient) {}\r\n\r\n    fetch(): Observable<HttpResponse<Account>> {\r\n        return this.http.get<Account>(SERVER_API_URL + 'api/account', { observe: 'response' });\r\n    }\r\n\r\n    save(account: any): Observable<HttpResponse<any>> {\r\n        return this.http.post(SERVER_API_URL + 'api/account', account, { observe: 'response' });\r\n    }\r\n\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    hasAnyAuthority(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then(\r\n            id => {\r\n                return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n            },\r\n            () => {\r\n                return Promise.resolve(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.fetch()\r\n            .toPromise()\r\n            .then(response => {\r\n                const account = response.body;\r\n                if (account) {\r\n                    this.userIdentity = account;\r\n                    this.authenticated = true;\r\n                    // After retrieve the account info, the language will be changed to\r\n                    // the user's preferred language configured in the account setting\r\n                    const langKey = this.sessionStorage.retrieve('locale') || this.userIdentity.langKey;\r\n                    this.languageService.changeLanguage(langKey);\r\n                } else {\r\n                    this.userIdentity = null;\r\n                    this.authenticated = false;\r\n                }\r\n                this.authenticationState.next(this.userIdentity);\r\n                return this.userIdentity;\r\n            })\r\n            .catch(err => {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n                this.authenticationState.next(this.userIdentity);\r\n                return null;\r\n            });\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n    getImageUrl(): string {\r\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\r\n    }\r\n}\r\n"]}]}