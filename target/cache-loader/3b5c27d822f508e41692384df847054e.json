{"remainingRequest":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js??ref--9-3!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\user\\user.service.ts","dependencies":[{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\user\\user.service.ts","mtime":1554281232185},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar request_util_1 = require(\"app/shared/util/request-util\");\r\nvar UserService = /** @class */ (function () {\r\n    function UserService(http) {\r\n        this.http = http;\r\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/users';\r\n    }\r\n    UserService.prototype.create = function (user) {\r\n        return this.http.post(this.resourceUrl, user, { observe: 'response' });\r\n    };\r\n    UserService.prototype.update = function (user) {\r\n        return this.http.put(this.resourceUrl, user, { observe: 'response' });\r\n    };\r\n    UserService.prototype.find = function (login) {\r\n        return this.http.get(this.resourceUrl + \"/\" + login, { observe: 'response' });\r\n    };\r\n    UserService.prototype.query = function (req) {\r\n        var options = request_util_1.createRequestOption(req);\r\n        return this.http.get(this.resourceUrl, { params: options, observe: 'response' });\r\n    };\r\n    UserService.prototype.delete = function (login) {\r\n        return this.http.delete(this.resourceUrl + \"/\" + login, { observe: 'response' });\r\n    };\r\n    UserService.prototype.authorities = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/users/authorities');\r\n    };\r\n    var _a;\r\n    UserService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], UserService);\r\n    return UserService;\r\n}());\r\nexports.UserService = UserService;\r\n",{"version":3,"file":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\user\\user.service.ts","sourceRoot":"","sources":["E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\user\\user.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAgE;AAGhE,mDAAmD;AACnD,6DAAmE;AAInE;IAGI,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF7B,gBAAW,GAAG,8BAAc,GAAG,WAAW,CAAC;IAEX,CAAC;IAExC,4BAAM,GAAN,UAAO,IAAW;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAQ,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,4BAAM,GAAN,UAAO,IAAW;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAQ,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACjF,CAAC;IAED,0BAAI,GAAJ,UAAK,KAAa;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,IAAI,CAAC,WAAW,SAAI,KAAO,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,2BAAK,GAAL,UAAM,GAAS;QACX,IAAM,OAAO,GAAG,kCAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC9F,CAAC;IAED,4BAAM,GAAN,UAAO,KAAa;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAI,IAAI,CAAC,WAAW,SAAI,KAAO,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IACrF,CAAC;IAED,iCAAW,GAAX;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAW,8BAAc,GAAG,uBAAuB,CAAC,CAAC;IAC7E,CAAC;;IA5BQ,WAAW;QADvB,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAIL,iBAAU,oBAAV,iBAAU;OAH3B,WAAW,CA6BvB;IAAD,kBAAC;CAAA,AA7BD,IA6BC;AA7BY,kCAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\nimport { createRequestOption } from 'app/shared/util/request-util';\r\nimport { IUser } from './user.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n    public resourceUrl = SERVER_API_URL + 'api/users';\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    create(user: IUser): Observable<HttpResponse<IUser>> {\r\n        return this.http.post<IUser>(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n\r\n    update(user: IUser): Observable<HttpResponse<IUser>> {\r\n        return this.http.put<IUser>(this.resourceUrl, user, { observe: 'response' });\r\n    }\r\n\r\n    find(login: string): Observable<HttpResponse<IUser>> {\r\n        return this.http.get<IUser>(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n    }\r\n\r\n    query(req?: any): Observable<HttpResponse<IUser[]>> {\r\n        const options = createRequestOption(req);\r\n        return this.http.get<IUser[]>(this.resourceUrl, { params: options, observe: 'response' });\r\n    }\r\n\r\n    delete(login: string): Observable<HttpResponse<any>> {\r\n        return this.http.delete(`${this.resourceUrl}/${login}`, { observe: 'response' });\r\n    }\r\n\r\n    authorities(): Observable<string[]> {\r\n        return this.http.get<string[]>(SERVER_API_URL + 'api/users/authorities');\r\n    }\r\n}\r\n"]}]}