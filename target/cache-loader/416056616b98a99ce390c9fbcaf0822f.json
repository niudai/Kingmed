{"remainingRequest":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js??ref--9-3!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts","dependencies":[{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts","mtime":1554281232175},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar rxjs_1 = require(\"rxjs\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar AuthServerProvider = /** @class */ (function () {\r\n    function AuthServerProvider(http, $localStorage, $sessionStorage) {\r\n        this.http = http;\r\n        this.$localStorage = $localStorage;\r\n        this.$sessionStorage = $sessionStorage;\r\n    }\r\n    AuthServerProvider.prototype.getToken = function () {\r\n        return this.$localStorage.retrieve('authenticationToken') || this.$sessionStorage.retrieve('authenticationToken');\r\n    };\r\n    AuthServerProvider.prototype.login = function (credentials) {\r\n        var data = {\r\n            username: credentials.username,\r\n            password: credentials.password,\r\n            rememberMe: credentials.rememberMe\r\n        };\r\n        return this.http.post(app_constants_1.SERVER_API_URL + 'api/authenticate', data, { observe: 'response' }).pipe(operators_1.map(authenticateSuccess.bind(this)));\r\n        function authenticateSuccess(resp) {\r\n            var bearerToken = resp.headers.get('Authorization');\r\n            if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                var jwt = bearerToken.slice(7, bearerToken.length);\r\n                this.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                return jwt;\r\n            }\r\n        }\r\n    };\r\n    AuthServerProvider.prototype.loginWithToken = function (jwt, rememberMe) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt, rememberMe);\r\n            return Promise.resolve(jwt);\r\n        }\r\n        else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    };\r\n    AuthServerProvider.prototype.storeAuthenticationToken = function (jwt, rememberMe) {\r\n        if (rememberMe) {\r\n            this.$localStorage.store('authenticationToken', jwt);\r\n        }\r\n        else {\r\n            this.$sessionStorage.store('authenticationToken', jwt);\r\n        }\r\n    };\r\n    AuthServerProvider.prototype.logout = function () {\r\n        var _this = this;\r\n        return new rxjs_1.Observable(function (observer) {\r\n            _this.$localStorage.clear('authenticationToken');\r\n            _this.$sessionStorage.clear('authenticationToken');\r\n            observer.complete();\r\n        });\r\n    };\r\n    var _a, _b, _c;\r\n    AuthServerProvider = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.LocalStorageService !== \"undefined\" && ngx_webstorage_1.LocalStorageService) === \"function\" ? _b : Object, typeof (_c = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _c : Object])\r\n    ], AuthServerProvider);\r\n    return AuthServerProvider;\r\n}());\r\nexports.AuthServerProvider = AuthServerProvider;\r\n",{"version":3,"file":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts","sourceRoot":"","sources":["E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\core\\auth\\auth-jwt.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAkD;AAClD,6BAAkC;AAClC,4CAAqC;AACrC,iDAA4E;AAE5E,mDAAmD;AAGnD;IACI,4BAAoB,IAAgB,EAAU,aAAkC,EAAU,eAAsC;QAA5G,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAqB;QAAU,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAEpI,qCAAQ,GAAR;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IACtH,CAAC;IAED,kCAAK,GAAL,UAAM,WAAW;QACb,IAAM,IAAI,GAAG;YACT,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE,WAAW,CAAC,UAAU;SACrC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8BAAc,GAAG,kBAAkB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpI,SAAS,mBAAmB,CAAC,IAAI;YAC7B,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACtD,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;gBACtD,IAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC;aACd;QACL,CAAC;IACL,CAAC;IAED,2CAAc,GAAd,UAAe,GAAG,EAAE,UAAU;QAC1B,IAAI,GAAG,EAAE;YACL,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC/B;aAAM;YACH,OAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC,CAAC,qCAAqC;SAClG;IACL,CAAC;IAED,qDAAwB,GAAxB,UAAyB,GAAG,EAAE,UAAU;QACpC,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SACxD;aAAM;YACH,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SAC1D;IACL,CAAC;IAED,mCAAM,GAAN;QAAA,iBAMC;QALG,OAAO,IAAI,iBAAU,CAAC,UAAA,QAAQ;YAC1B,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAChD,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAClD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;;IAhDQ,kBAAkB;QAD9B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAEL,iBAAU,oBAAV,iBAAU,oDAAyB,oCAAmB,oBAAnB,oCAAmB,oDAA2B,sCAAqB,oBAArB,sCAAqB;OADvH,kBAAkB,CAiD9B;IAAD,yBAAC;CAAA,AAjDD,IAiDC;AAjDY,gDAAkB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthServerProvider {\r\n    constructor(private http: HttpClient, private $localStorage: LocalStorageService, private $sessionStorage: SessionStorageService) {}\r\n\r\n    getToken() {\r\n        return this.$localStorage.retrieve('authenticationToken') || this.$sessionStorage.retrieve('authenticationToken');\r\n    }\r\n\r\n    login(credentials): Observable<any> {\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password,\r\n            rememberMe: credentials.rememberMe\r\n        };\r\n        return this.http.post(SERVER_API_URL + 'api/authenticate', data, { observe: 'response' }).pipe(map(authenticateSuccess.bind(this)));\r\n\r\n        function authenticateSuccess(resp) {\r\n            const bearerToken = resp.headers.get('Authorization');\r\n            if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\r\n                const jwt = bearerToken.slice(7, bearerToken.length);\r\n                this.storeAuthenticationToken(jwt, credentials.rememberMe);\r\n                return jwt;\r\n            }\r\n        }\r\n    }\r\n\r\n    loginWithToken(jwt, rememberMe) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt, rememberMe);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    storeAuthenticationToken(jwt, rememberMe) {\r\n        if (rememberMe) {\r\n            this.$localStorage.store('authenticationToken', jwt);\r\n        } else {\r\n            this.$sessionStorage.store('authenticationToken', jwt);\r\n        }\r\n    }\r\n\r\n    logout(): Observable<any> {\r\n        return new Observable(observer => {\r\n            this.$localStorage.clear('authenticationToken');\r\n            this.$sessionStorage.clear('authenticationToken');\r\n            observer.complete();\r\n        });\r\n    }\r\n}\r\n"]}]}