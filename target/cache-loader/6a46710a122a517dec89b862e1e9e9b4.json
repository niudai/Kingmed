{"remainingRequest":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js??ref--9-3!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","dependencies":[{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","mtime":1554281232140},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar operators_1 = require(\"rxjs/operators\");\r\nvar app_constants_1 = require(\"app/app.constants\");\r\nvar JhiConfigurationService = /** @class */ (function () {\r\n    function JhiConfigurationService(http) {\r\n        this.http = http;\r\n    }\r\n    JhiConfigurationService.prototype.get = function () {\r\n        var _this = this;\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(operators_1.map(function (res) {\r\n            var properties = [];\r\n            var propertiesObject = _this.getConfigPropertiesObjects(res.body);\r\n            for (var key in propertiesObject) {\r\n                if (propertiesObject.hasOwnProperty(key)) {\r\n                    properties.push(propertiesObject[key]);\r\n                }\r\n            }\r\n            return properties.sort(function (propertyA, propertyB) {\r\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\r\n            });\r\n        }));\r\n    };\r\n    JhiConfigurationService.prototype.getConfigPropertiesObjects = function (res) {\r\n        // This code is for Spring Boot 2\r\n        if (res['contexts'] !== undefined) {\r\n            for (var key in res['contexts']) {\r\n                // If the key is not bootstrap, it will be the ApplicationContext Id\r\n                // For default app, it is baseName\r\n                // For microservice, it is baseName-1\r\n                if (!key.startsWith('bootstrap')) {\r\n                    return res['contexts'][key]['beans'];\r\n                }\r\n            }\r\n        }\r\n        // by default, use the default ApplicationContext Id\r\n        return res['contexts']['jhipsterElasticsearchSampleApplication']['beans'];\r\n    };\r\n    JhiConfigurationService.prototype.getEnv = function () {\r\n        return this.http.get(app_constants_1.SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(operators_1.map(function (res) {\r\n            var properties = {};\r\n            var propertySources = res.body['propertySources'];\r\n            for (var _i = 0, propertySources_1 = propertySources; _i < propertySources_1.length; _i++) {\r\n                var propertyObject = propertySources_1[_i];\r\n                var name = propertyObject['name'];\r\n                var detailProperties = propertyObject['properties'];\r\n                var vals = [];\r\n                for (var keyDetail in detailProperties) {\r\n                    if (detailProperties.hasOwnProperty(keyDetail)) {\r\n                        vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\r\n                    }\r\n                }\r\n                properties[name] = vals;\r\n            }\r\n            return properties;\r\n        }));\r\n    };\r\n    var _a;\r\n    JhiConfigurationService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\r\n    ], JhiConfigurationService);\r\n    return JhiConfigurationService;\r\n}());\r\nexports.JhiConfigurationService = JhiConfigurationService;\r\n",{"version":3,"file":"E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts","sourceRoot":"","sources":["E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\angular-router-loader\\src\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\node_modules\\tslint-loader\\index.js!E:\\jhipster\\jhipster-sample-app-elasticsearch\\src\\main\\webapp\\app\\admin\\configuration\\configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { SERVER_API_URL } from 'app/app.constants';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JhiConfigurationService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    get(): Observable<any> {\r\n        return this.http.get(SERVER_API_URL + 'management/configprops', { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                const properties: any[] = [];\r\n                const propertiesObject = this.getConfigPropertiesObjects(res.body);\r\n                for (const key in propertiesObject) {\r\n                    if (propertiesObject.hasOwnProperty(key)) {\r\n                        properties.push(propertiesObject[key]);\r\n                    }\r\n                }\r\n\r\n                return properties.sort((propertyA, propertyB) => {\r\n                    return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\r\n                });\r\n            })\r\n        );\r\n    }\r\n\r\n    getConfigPropertiesObjects(res: Object) {\r\n        // This code is for Spring Boot 2\r\n        if (res['contexts'] !== undefined) {\r\n            for (const key in res['contexts']) {\r\n                // If the key is not bootstrap, it will be the ApplicationContext Id\r\n                // For default app, it is baseName\r\n                // For microservice, it is baseName-1\r\n                if (!key.startsWith('bootstrap')) {\r\n                    return res['contexts'][key]['beans'];\r\n                }\r\n            }\r\n        }\r\n        // by default, use the default ApplicationContext Id\r\n        return res['contexts']['jhipsterElasticsearchSampleApplication']['beans'];\r\n    }\r\n\r\n    getEnv(): Observable<any> {\r\n        return this.http.get(SERVER_API_URL + 'management/env', { observe: 'response' }).pipe(\r\n            map((res: HttpResponse<any>) => {\r\n                const properties: any = {};\r\n                const propertySources = res.body['propertySources'];\r\n\r\n                for (const propertyObject of propertySources) {\r\n                    const name = propertyObject['name'];\r\n                    const detailProperties = propertyObject['properties'];\r\n                    const vals: any[] = [];\r\n                    for (const keyDetail in detailProperties) {\r\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\r\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\r\n                        }\r\n                    }\r\n                    properties[name] = vals;\r\n                }\r\n                return properties;\r\n            })\r\n        );\r\n    }\r\n}\r\n"]}]}